included:
- App/Sources
- Tests/Sources
- UITests/Sources

analyzer_rules:
- unused_import
- unused_private_declaration

opt_in_rules:
- array_init
- attributes
- closure_end_indentation
- closure_spacing
- conditional_returns_on_newline
- contains_over_first_not_nil
- convenience_type
- empty_string
- empty_xctest_method
- explicit_init
- explicit_type_interface
- extension_access_modifier
- fallthrough
- fatal_error_message
- file_header
- first_where
- function_default_parameter_at_end
- is_disjoint
- joined_default_parameter
- let_var_whitespace
- literal_expression_end_indentation
- multiline_arguments
- multiline_arguments_brackets
- multiline_function_chains
- multiline_literal_brackets
- multiline_parameters
- multiline_parameters_brackets
- number_separator
- object_literal
- operator_usage_whitespace
- overridden_super_call
- override_in_extension
- pattern_matching_keywords
- private_action
- private_outlet
- prohibited_super_call
- quick_discouraged_call
- quick_discouraged_focused_test
- quick_discouraged_pending_test
- redundant_nil_coalescing
- single_test_class
- sorted_imports
- switch_case_on_newline
- unavailable_function
- unneeded_parentheses_in_closure_argument
- untyped_error_in_catch
- vertical_parameter_alignment_on_call
- vertical_whitespace_between_cases
- vertical_whitespace_closing_braces
- vertical_whitespace_opening_braces

disabled_rules:
- force_cast
- type_name
- redundant_type_annotation
- redundant_void_return
- yoda_condition
- notification_center_detachment
- empty_count
- large_tuple
- sorted_first_last
- object_literal

conditional_returns_on_newline:
  if_only: true

explicit_type_interface:
  allow_redundancy: true
  excluded:
    - local

file_header:
  required_pattern: |
                    \/\/  Copyright © \d{4} Andreas Link\. All rights reserved\.

file_types_order:
  order:
    - supporting_type
    - main_type
    - extension

identifier_name:
  excluded:
    - id
    - at
    - to

type_body_length:
  - 300 # warning
  - 400 # error

file_length:
    warning: 500
    error: 1200

line_length: 120

type_contents_order:
  order:
    - case
    - [type_alias, associated_type]
    - subtype
    - type_property
    - ib_inspectable
    - instance_property
    - ib_outlet
    - initializer
    - type_method
    - view_life_cycle_method
    - ib_action
    - other_method
    - subscript

# Custom Rules
custom_rules:
  closure_params_parantheses:
    included: ".*.swift"
    regex: '\{\s*\([^):]+\)\s*in'
    name: "Unnecessary Closure Params Parantheses"
    message: "Don't use parantheses around non-typed parameters in a closure."
    severity: warning
  debug_log_level:
    included: ".*.swift"
    regex: 'log.debug\('
    name: "Debug Log Level"
    message: "Make sure to remove all debug log levels before committing."
    severity: warning
  dynamic_color_reference:
    included: ".*.swift"
    regex: 'UIColor\(\s*named:\s*\"'
    name: "Dynamic Color Reference"
    message: "Don't use dynamic color references – use SwiftGen & Color instead."
    severity: warning
  dynamic_storyboard_reference:
    included: ".*.swift"
    regex: 'UIStoryboard\(\s*name:\s*\"'
    name: "Dynamic Storyboard Reference"
    message: "Don't use dynamic storyboard references – use SwiftGen & StoryboardScene instead."
    severity: warning
  dynamic_string_reference:
    included: ".*.swift"
    regex: 'NSLocalizedString\s*\('
    name: "Dynamic String Reference"
    message: "Don't use dynamic localization string references via code strings – use SwiftGen & L10n instead."
    severity: warning
  empty_init_body:
    included: ".*.swift"
    regex: 'init\([^\{\n]*\) \{\s+\}'
    name: "Empty Init Body"
    message: "Don't use whitespace or newlines for the body of empty initializers – use `init() {}` instead."
    severity: warning
  empty_method:
    included: ".*.swift"
    regex: 'func [^\s\(]+\([^\{\n]*\) \{\s*\}'
    name: "Empty Method"
    message: "Don't keep empty methods in code without commenting inside why they are needed or a `// TODO: not yet implemented`."
    severity: warning
  empty_type:
    included: ".*.swift"
    regex: '(?:class|protocol|struct|enum) [^\{]+\{\s*\}'
    name: "Empty Type"
    message: "Don't keep empty types in code without commenting inside why they are needed or a `// TODO: not yet implemented`."
    severity: warning
  local_l10n:
    included: ".*.swift"
    regex: 'func \S+\s*\{\s*[^\}]*let l10n'
    name: "Local l10n"
    message: "Don't name local variable `l10n` – use a property instead and further specify with `localL10n` if needed."
    severity: warning
  log_prefix:
    included: ".*.swift"
    regex: 'log\.(?:verbose|debug|info|warning|error)\("(?:verbose|debug|info|warning|error).*"\)'
    name: "Logging Prefix"
    message: "Don't use logging prefixes with log.verbose/debug/info/warning/error – done automatically."
    severity: warning
  quick_temporary_disabling:
    included: ".*.swift"
    regex: '\sxdescribe\(|\sxcontext\(|\sxit\('
    name: "Quick Temporary Disabling"
    message: "Temporary disabled Quick examples or groups shouldn't be commited."
    severity: warning
  quick_temporary_focus:
    included: ".*.swift"
    regex: '\sfdescribe\(|\sfcontext\(|\sfit\('
    name: "Quick Temporary Focus"
    message: "Temporary focused Quick examples or groups shouldn't be commited."
    severity: warning
  single_line_enum_cases:
    included: ".*.swift"
    regex: 'enum [^\{]+\{\s*(?:\s*\/\/[^\n]*)*\s*case\s+[^,(\n]+,'
    name: "Single Line Enum Cases"
    message: "Use a new line for each enum case."
    severity: warning
  singleton_default_private_init:
    included: ".*.swift"
    regex: 'class +(?<TYPE>\w+)(?:<[^\>]+>)? *\{.*static let `default`(?:: *\k<TYPE>)? *= *\k<TYPE>\(.*(?<=private) init\('
    name: "Singleton Default Private Init"
    message: "Singletons with a `default` object (pseudo-singletons) should not declare init methods as private."
    severity: warning
  singleton_shared_final:
    included: ".*.swift"
    regex: '(?<!final )class +(?<TYPE>\w+)(?:<[^\>]+>)? *\{.*static let shared(?:: *\k<TYPE>)? *= *\k<TYPE>\('
    name: "Singleton Shared Final"
    message: "Singletons with a single object (`shared`) should be marked as final."
    severity: warning
  singleton_shared_private_init:
    included: ".*.swift"
    regex: 'class +(?<TYPE>\w+)(?:<[^\>]+>)? *\{.*static let shared(?:: *\k<TYPE>)? *= *\k<TYPE>\(.*(?<= |\t|public|internal) init\('
    name: "Singleton Shared Private Init"
    message: "Singletons with a single object (`shared`) should declare their init method(s) as private."
    severity: warning
  singleton_shared_single_object:
    included: ".*.swift"
    regex: 'class +(?<TYPE>\w+)(?:<[^\>]+>)? *\{.*(?:static let shared(?:: *\k<TYPE>)? *= *\k<TYPE>\(.*static let \w+(?:: *\k<TYPE>)? *= *\k<TYPE>\(|static let \w+(?:: *\k<TYPE>)? *= *\k<TYPE>\(.*static let shared(?:: *\k<TYPE>)? *= *\k<TYPE>\()'
    name: "Singleton Shared Single Object"
    message: "Singletons with a `shared` object (real Singletons) should not have other static let properties. Use `default` instead (if needed)."
    severity: warning
  swiftybeaver_logging:
    included: ".*.swift"
    regex: '^[^\/\n\w]*+(?!\/\/)[^\n\/]*print\([^\n]+\)'
    name: "SwiftyBeaver Logging"
    message: "Don't use print – use log.verbose/debug/info/warning/error instead."
    severity: warning
  switch_associated_value_style:
    included: ".*.swift"
    regex: '^((?!if).)*\s*case\s+[^\(][^\n]*(?:\((let|var) |[^\)], (let|var))'
    name: "Switch Associated Value Style"
    message: "Always put the `let` in front of case – even if only one associated value captured."
    severity: warning
  toggle_bool:
    included: ".*.swift"
    regex: '(?<=\n)[ \t]*(?<VAR>\w+) *= *!\k<VAR>(?=\s)'
    name: "Toggle Bool"
    message: "Use `toggle()` instead of toggling manually."
    severity: warning
  unnecessary_nil_assignment:
    included: ".*.swift"
    regex: 'var \S+\s*:\s*[^\s]+\?\s*=\s*nil'
    name: "Unnecessary Nil Assignment"
    message: "Don't assign nil as a value when defining an optional type – it's nil by default."
    severity: warning
  vertical_whitespaces_around_mark:
    included: ".*.swift"
    regex: '\/\/\s*MARK:[^\n]*(\n\n)|(\n\n\n)[ \t]*\/\/\s*MARK:|[^\s{]\n[^\n\/]*\/\/\s*MARK:'
    name: "Vertical Whitespaces Around MARK:"
    message: "Include a single vertical whitespace (empty line) before and none after MARK: comments."
    severity: warning
  whitespace_around_range_operators:
    included: ".*.swift"
    regex: '\w\.\.[<\.]\w'
    name: "Whitespace around Range Operators"
    message: "A range operator should be surrounded by a single whitespace."
    severity: warning
  whitespace_comment_start:
    included: ".*.swift"
    regex: '[^:#\]\}\)][^:#\]\}\)]\/\/[^\s\/]'
    name: "Whitespace Comment Start"
    message: "A comment should always start with a whitespace."
    severity: warning
